{
    "servers": [
        {
            "label": "Rotary encoder",
            "detail": "An incremental rotary encoder - converts angular motion of a shaft to digital signal.",
            "startName": "startRotaryEncoder",
            "classIdentifiers": [
                284830153
            ],
            "imports": {
                "startRotaryEncoder": "@devicescript/servers"
            },
            "snippet": "const rotaryEncoder = startRotaryEncoder({\n    pin0: pins.${1},\n    pin1: pins.${2},\n})\n"
        },
        {
            "label": "Button",
            "detail": "A push-button, which returns to inactive position when not operated anymore.",
            "startName": "startButton",
            "classIdentifiers": [
                343122531
            ],
            "imports": {
                "startButton": "@devicescript/servers"
            },
            "snippet": "const button = startButton({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Switch",
            "detail": "A switch, which keeps its position.",
            "startName": "startSwitch",
            "classIdentifiers": [
                450008066
            ],
            "imports": {
                "startSwitch": "@devicescript/servers"
            },
            "snippet": "const switch = startSwitch({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Flex",
            "detail": "A bending or deflection sensor.",
            "startName": "startFlex",
            "classIdentifiers": [
                524797638
            ],
            "imports": {
                "startFlex": "@devicescript/servers"
            },
            "snippet": "const flex = startFlex({\n    pinL: pins.${1},\n    pinM: pins.${2},\n    pinH: pins.${3},\n})\n"
        },
        {
            "label": "Relay",
            "detail": "A switching relay.",
            "startName": "startRelay",
            "classIdentifiers": [
                406840918
            ],
            "imports": {
                "startRelay": "@devicescript/servers"
            },
            "snippet": "const relay = startRelay({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Motion",
            "detail": "A sensor, typically PIR, that detects object motion within a certain range",
            "startName": "startMotion",
            "classIdentifiers": [
                293185353
            ],
            "imports": {
                "startMotion": "@devicescript/servers"
            },
            "snippet": "const motion = startMotion({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Motor",
            "detail": "A DC motor.",
            "startName": "startMotor",
            "classIdentifiers": [
                385895640
            ],
            "imports": {
                "startMotor": "@devicescript/servers"
            },
            "snippet": "const motor = startMotor({\n    pin1: pins.${1},\n})\n"
        },
        {
            "label": "Light bulb",
            "detail": "A light bulb controller.",
            "startName": "startLightBulb",
            "classIdentifiers": [
                480970060
            ],
            "imports": {
                "startLightBulb": "@devicescript/servers"
            },
            "snippet": "const lightBulb = startLightBulb({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Buzzer",
            "detail": "A simple buzzer.",
            "startName": "startBuzzer",
            "classIdentifiers": [
                458731991
            ],
            "imports": {
                "startBuzzer": "@devicescript/servers"
            },
            "snippet": "const buzzer = startBuzzer({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Servo",
            "detail": "Servo is a small motor with arm that can be pointing at a specific direction.",
            "startName": "startServo",
            "classIdentifiers": [
                318542083
            ],
            "imports": {
                "startServo": "@devicescript/servers"
            },
            "snippet": "const servo = startServo({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Light level",
            "detail": "A sensor that measures luminosity level.",
            "startName": "startLightLevel",
            "classIdentifiers": [
                400333340
            ],
            "imports": {
                "startLightLevel": "@devicescript/servers"
            },
            "snippet": "const lightLevel = startLightLevel({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Reflected light",
            "detail": "A sensor that detects light and dark surfaces, commonly used for line following robots.",
            "startName": "startReflectedLight",
            "classIdentifiers": [
                309087410
            ],
            "imports": {
                "startReflectedLight": "@devicescript/servers"
            },
            "snippet": "const reflectedLight = startReflectedLight({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Water level",
            "detail": "A sensor that measures liquid/water level.",
            "startName": "startWaterLevel",
            "classIdentifiers": [
                343630573
            ],
            "imports": {
                "startWaterLevel": "@devicescript/servers"
            },
            "snippet": "const waterLevel = startWaterLevel({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Sound level",
            "detail": "A sound level detector sensor, gives a relative indication of the sound level.",
            "startName": "startSoundLevel",
            "classIdentifiers": [
                346888797
            ],
            "imports": {
                "startSoundLevel": "@devicescript/servers"
            },
            "snippet": "const soundLevel = startSoundLevel({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Soil moisture",
            "detail": "A soil moisture sensor.",
            "startName": "startSoilMoisture",
            "classIdentifiers": [
                491430835
            ],
            "imports": {
                "startSoilMoisture": "@devicescript/servers"
            },
            "snippet": "const soilMoisture = startSoilMoisture({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Potentiometer",
            "detail": "A slider or rotary potentiometer.",
            "startName": "startPotentiometer",
            "classIdentifiers": [
                522667846
            ],
            "imports": {
                "startPotentiometer": "@devicescript/servers"
            },
            "snippet": "const potentiometer = startPotentiometer({\n    pin: pins.${1},\n})\n"
        },
        {
            "label": "Accelerometer",
            "detail": "A 3-axis accelerometer.",
            "startName": "startAccelerometer",
            "classIdentifiers": [
                521405449
            ],
            "imports": {
                "startAccelerometer": "@devicescript/servers"
            },
            "snippet": "const accelerometer = startAccelerometer({\n})\n"
        },
        {
            "label": "HID Joystick",
            "detail": "Controls a HID joystick.",
            "startName": "startHidJoystick",
            "classIdentifiers": [
                437330261
            ],
            "imports": {
                "startHidJoystick": "@devicescript/servers"
            },
            "snippet": "const hidJoystick = startHidJoystick({\n})\n"
        },
        {
            "label": "HID Keyboard",
            "detail": "Control a HID keyboard.",
            "startName": "startHidKeyboard",
            "classIdentifiers": [
                414210922
            ],
            "imports": {
                "startHidKeyboard": "@devicescript/servers"
            },
            "snippet": "const hidKeyboard = startHidKeyboard({\n})\n"
        },
        {
            "label": "HID Mouse",
            "detail": "Controls a HID mouse.",
            "startName": "startHidMouse",
            "classIdentifiers": [
                411425820
            ],
            "imports": {
                "startHidMouse": "@devicescript/servers"
            },
            "snippet": "const hidMouse = startHidMouse({\n})\n"
        },
        {
            "label": "Gamepad",
            "detail": "A two axis directional gamepad with optional buttons.",
            "startName": "startGamepad",
            "classIdentifiers": [
                277836886
            ],
            "imports": {
                "startGamepad": "@devicescript/servers"
            },
            "snippet": "const gamepad = startGamepad({\n})\n"
        },
        {
            "label": "Sensirion SHTC3",
            "detail": "Start driver for Sensirion SHTC3 temperature/humidity sensor at I2C `0x70`.\r",
            "startName": "startSHTC3",
            "classIdentifiers": [
                337754823,
                382210232
            ],
            "imports": {
                "startSHTC3": "@devicescript/drivers"
            },
            "snippet": "const { temperature, humidity } = await startSHTC3()\n"
        },
        {
            "label": "Sensirion SHT30",
            "detail": "Start driver for Sensirion SHT30 temperature/humidity sensor at I2C `0x44` or `0x45` (default is `0x44`)\r",
            "startName": "startSHT30",
            "classIdentifiers": [
                337754823,
                382210232
            ],
            "imports": {
                "startSHT30": "@devicescript/drivers"
            },
            "snippet": "const { temperature, humidity } = await startSHT30()\n"
        },
        {
            "label": "AHT20",
            "detail": "Start driver for AHT20 temperature/humidity sensor at I2C address `0x38`.\r",
            "startName": "startAHT20",
            "classIdentifiers": [
                337754823,
                382210232
            ],
            "imports": {
                "startAHT20": "@devicescript/drivers"
            },
            "snippet": "const { temperature, humidity } = await startAHT20()\n"
        },
        {
            "label": "LITEON LTR-390UV-01",
            "detail": "Start driver for LITEON LTR-390UV-01 UV/ambient light sensor at I2C address `0x53`.\r",
            "startName": "startLTR390",
            "classIdentifiers": [
                527306128,
                510577394
            ],
            "imports": {
                "startLTR390": "@devicescript/drivers"
            },
            "snippet": "const { uvIndex, illuminance } = await startLTR390()\n"
        },
        {
            "label": "Bosch BME68",
            "detail": "Start driver for Bosch BME680 temperature/humidity/pressure/gas sensor at I2C `0x76` (default) or `0x77`.\r",
            "startName": "startBME680",
            "classIdentifiers": [
                337754823,
                382210232,
                504462570,
                346844886
            ],
            "imports": {
                "startBME680": "@devicescript/drivers"
            },
            "snippet": "const { temperature, humidity, pressure, airQualityIndex } = await startBME680()\n"
        },
        {
            "label": "Pico Bricks for Raspberry Pi Pico",
            "detail": "Drivers for the {@link https://shop.robotistan.com/products/pico-bricks | Pico Bricks } shield for Raspberry Pi Pico ({@link https://github.com/Robotistan/PicoBricks/tree/main/Documents | datasheets}).\r",
            "startName": "PicoBricks",
            "imports": {
                "PicoBricks": "@devicescript/drivers"
            },
            "snippet": "const shield = new PicoBricks()\n"
        },
        {
            "label": "Seeed Studio XIAO Expansion Board",
            "detail": "Drivers for the {@link https://wiki.seeedstudio.com/Seeeduino-XIAO-Expansion-Board/ | Seeed Studio XIAO Expansion Board }.\r",
            "startName": "XiaoExpansionBoard",
            "imports": {
                "XiaoExpansionBoard": "@devicescript/drivers"
            },
            "snippet": "const shield = new XiaoExpansionBoard()\n"
        },
        {
            "label": "Grove Shield for Seeed Studio XIAO",
            "detail": "Drivers for the {@link https://www.seeedstudio.com/Grove-Shield-for-Seeeduino-XIAO-p-4621.html | Grove Shield for Seeed Studio XIAO } for Raspberry Pi Pico.\r",
            "startName": "XiaoGroveShield",
            "imports": {
                "XiaoGroveShield": "@devicescript/drivers"
            },
            "snippet": "const shield = new XiaoGroveShield()\n"
        },
        {
            "label": "WaveShare Pico LCD114 for Raspberry Pi Pico",
            "detail": "Driver for WaveShare Pico-LCD-1.14 inch.\r",
            "startName": "WaveSharePicoLCD114",
            "imports": {
                "WaveSharePicoLCD114": "@devicescript/drivers"
            },
            "snippet": "const shield = new WaveSharePicoLCD114()\n"
        },
        {
            "label": "Pimoroni Pico Badger",
            "detail": "Support for Badger 2040 W (Pico W Aboard)\r",
            "startName": "PimoroniBadger2040W",
            "imports": {
                "PimoroniBadger2040W": "@devicescript/drivers"
            },
            "snippet": "const shield = new PimoroniBadger2040W()\n"
        },
        {
            "label": "KittenBot Grape:bit ESP32-C3",
            "detail": "Support for KittenBot Grape:bit ESP32-C3\r",
            "startName": "KittenBotGrapeBit",
            "imports": {
                "KittenBotGrapeBit": "@devicescript/drivers"
            },
            "snippet": "const shield = new KittenBotGrapeBit()\n"
        }
    ]
}